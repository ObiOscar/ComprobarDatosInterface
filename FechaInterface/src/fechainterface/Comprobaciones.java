/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fechainterface;

import java.awt.Color;
import java.awt.Font;
import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;

/**
 *
 * @author oski_
 */
public class Comprobaciones extends javax.swing.JFrame {

    static int[] diasMes = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    static int[] numeroMes = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
    Font negrita = new Font("Arial", Font.BOLD, 14);

    /**
     * Creates new form Fecha
     */
    public Comprobaciones() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jBComprobarCodigoPostal = new javax.swing.JButton();
        jFCodigoPostal = new javax.swing.JFormattedTextField();
        jLabel13 = new javax.swing.JLabel();
        jLMostrarProvincia = new javax.swing.JLabel();
        jDNI1 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jBComprobarIBAN = new javax.swing.JButton();
        jFIBAN = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jBComprobarAnnos = new javax.swing.JButton();
        jFFechaAnos = new javax.swing.JFormattedTextField();
        jLabel15 = new javax.swing.JLabel();
        jLMostrarEdad = new javax.swing.JLabel();
        jLMostrarIBAN = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jBComprobarFecha = new javax.swing.JButton();
        jFFecha = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        jLMostrarFechaCorrecta = new javax.swing.JLabel();
        jDNI = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jFDNI = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        jBComprobarDNI = new javax.swing.JButton();
        jLMostrarDNICorrecto = new javax.swing.JLabel();
        jLMostrarDNICorrecto1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel12.setText("C.P :");

        jBComprobarCodigoPostal.setText("Comprobar");
        jBComprobarCodigoPostal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBComprobarCodigoPostalActionPerformed(evt);
            }
        });

        try {
            jFCodigoPostal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFCodigoPostal.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fechainterface/correcto.png"))); // NOI18N
        jLabel13.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jFCodigoPostal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBComprobarCodigoPostal, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLMostrarProvincia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBComprobarCodigoPostal)
                    .addComponent(jFCodigoPostal, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLMostrarProvincia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );

        jLabel10.setText("IBAN");

        jBComprobarIBAN.setText("Comprobar");
        jBComprobarIBAN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBComprobarIBANActionPerformed(evt);
            }
        });

        try {
            jFIBAN.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("UU ## #### #### ## ##########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFIBAN.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fechainterface/correcto.png"))); // NOI18N
        jLabel11.setEnabled(false);

        jLabel14.setText("Nacimiento:");

        jBComprobarAnnos.setText("Comprobar");
        jBComprobarAnnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBComprobarAnnosActionPerformed(evt);
            }
        });

        try {
            jFFechaAnos.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFFechaAnos.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jFFechaAnos.setText(" / /");
        jFFechaAnos.setName(""); // NOI18N

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fechainterface/correcto.png"))); // NOI18N
        jLabel15.setEnabled(false);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel14)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(jFFechaAnos, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(jBComprobarAnnos, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLMostrarEdad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBComprobarAnnos)
                    .addComponent(jFFechaAnos, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLMostrarEdad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout jDNI1Layout = new javax.swing.GroupLayout(jDNI1);
        jDNI1.setLayout(jDNI1Layout);
        jDNI1Layout.setHorizontalGroup(
            jDNI1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDNI1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addGroup(jDNI1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDNI1Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLMostrarIBAN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jDNI1Layout.createSequentialGroup()
                        .addComponent(jFIBAN, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBComprobarIBAN, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jDNI1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDNI1Layout.setVerticalGroup(
            jDNI1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDNI1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jDNI1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBComprobarIBAN)
                    .addComponent(jFIBAN, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDNI1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLMostrarIBAN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel8.setText("Fecha :");

        jBComprobarFecha.setText("Comprobar");
        jBComprobarFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBComprobarFechaActionPerformed(evt);
            }
        });

        try {
            jFFecha.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFFecha.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jFFecha.setText(" / /");
        jFFecha.setName(""); // NOI18N

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fechainterface/correcto.png"))); // NOI18N
        jLabel9.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel8)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(jFFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(jBComprobarFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLMostrarFechaCorrecta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBComprobarFecha)
                    .addComponent(jFFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                        .addGap(12, 12, 12))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLMostrarFechaCorrecta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        jLabel6.setText("DNI :");

        try {
            jFDNI.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("########-U")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFDNI.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jFDNI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFDNIActionPerformed(evt);
            }
        });

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fechainterface/correcto.png"))); // NOI18N
        jLabel7.setEnabled(false);

        jBComprobarDNI.setText("Comprobar");
        jBComprobarDNI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBComprobarDNIActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDNILayout = new javax.swing.GroupLayout(jDNI);
        jDNI.setLayout(jDNILayout);
        jDNILayout.setHorizontalGroup(
            jDNILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDNILayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(jDNILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jDNILayout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLMostrarDNICorrecto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jDNILayout.createSequentialGroup()
                        .addComponent(jFDNI)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBComprobarDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jDNILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jDNILayout.createSequentialGroup()
                    .addGap(125, 125, 125)
                    .addComponent(jLMostrarDNICorrecto1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(168, 168, 168)))
        );
        jDNILayout.setVerticalGroup(
            jDNILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDNILayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jDNILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jBComprobarDNI))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDNILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLMostrarDNICorrecto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12))
            .addGroup(jDNILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jDNILayout.createSequentialGroup()
                    .addGap(63, 63, 63)
                    .addComponent(jLMostrarDNICorrecto1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(2, 2, 2)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jDNI, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDNI1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDNI1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBComprobarFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBComprobarFechaActionPerformed
        int annoMenor = 1967;
        int annoMaximo = 2067;
        String fechaPasada = jFFecha.getText();
        String[] partesFecha = fechaPasada.split("/");  //Rompo la cadena
        String dia = partesFecha[0];
        String mes = partesFecha[1];
        String anno = partesFecha[2];

        System.out.println(fechaPasada);

        /*Compruebo que la cadena no este vacia */
        if (!dia.equals("  ") || !mes.equals("  ") || !anno.equals("    ")) {

            //Añado un 0 al mes si tiene 1 digito
            if (mes.length() == 1) {
                mes = "0" + mes;
            }

            //Compruebo si el dia es correcto
            for (int i = 0; i < numeroMes.length; i++) {    //Recorro como máximo 12 veces
                if (Integer.parseInt(anno) >= annoMenor && Integer.parseInt(anno) <= annoMaximo) {  //Compruebo que el correo es correcto
                    if (Integer.parseInt(mes) == numeroMes[i]) {
                        if (diasMes[i] >= Integer.parseInt(dia) && Integer.parseInt(dia) > 0) {
                            jLabel9.setIcon(new ImageIcon(getClass().getResource("/fechainterface/correcto.png"))); // NOI18N
                            jLabel9.setEnabled(true);
                            jLMostrarFechaCorrecta.setText("Fecha correcta");
                            jLMostrarFechaCorrecta.setFont(negrita);
                            jLMostrarFechaCorrecta.setForeground(Color.darkGray);    //Esto igual esta prohibido

                            System.out.println("Fecha Correcta");
                        } else {
                            //Antes de decir que la fecha no es correcta, hay que comprobar bisiestos
                            if (numeroMes[1] == Integer.parseInt(mes)) {
                                //SI ((año divisible por 4) Y ((año no divisible por 100) O (año divisible por 400))) ENTONC
                                if ((Integer.parseInt(anno) % 4 == 0) && (Integer.parseInt(anno) % 100 != 0) && (Integer.parseInt(dia) == 29)) {
                                    jLabel9.setIcon(new ImageIcon(getClass().getResource("/fechainterface/correcto.png"))); // NOI18N
                                    jLabel9.setEnabled(true);
                                    jLMostrarFechaCorrecta.setText("Fecha correcta");
                                    jLMostrarFechaCorrecta.setFont(negrita);
                                    jLMostrarFechaCorrecta.setForeground(Color.darkGray);    //Esto igual esta prohibido

                                } else {
                                    jLabel9.setIcon(new ImageIcon(getClass().getResource("/fechainterface/error.png"))); // NOI18N
                                    jLabel9.setEnabled(true);
                                    jLMostrarFechaCorrecta.setText("Error en fecha");
                                    jLMostrarFechaCorrecta.setFont(negrita);
                                    jLMostrarFechaCorrecta.setForeground(Color.red);    //Esto igual esta prohibido
                                    JOptionPane.showMessageDialog(null, "Fecha no válida, no existe " + jFFecha.getText());
                                    System.out.println("Fecha Incorrecta");
                                }
                            }
                        }
                    }
                }
            }
        } else {

            jLabel9.setIcon(new ImageIcon(getClass().getResource("/fechainterface/error.png"))); // NOI18N
            jLabel9.setEnabled(true);
            jLMostrarFechaCorrecta.setText("Error en Fecha, faltan caracteres");
            jLMostrarFechaCorrecta.setFont(negrita);
            jLMostrarFechaCorrecta.setForeground(Color.red);    //Esto igual esta prohibido
            JOptionPane.showMessageDialog(null, "No ha introducido fecha válida ");
            System.out.println("Fecha Incorrecta");
        }
    }//GEN-LAST:event_jBComprobarFechaActionPerformed

    private void jBComprobarDNIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBComprobarDNIActionPerformed
        /*"La letra del DNI se obtiene dividiendo el número completo de nuestro DNI entre 23
           y al resto de dicha división que deberá estar comprendido entre 0 y 22 se le asigna la
           letra según la equivalencia de la siguiente tabla:
        RESTO	0	1	2	3	4	5	6	7	8	9	10	11
        LETRA	T	R	W	A	G	M	Y	F	P	D	X	B
 

        RESTO	12	13	14	15	16	17	18	19	20	21	22
        LETRA	N	J	Z	S	Q	V	H	L	C	K	E
         */

        String letrasSegunResto = "TRWAGMYFPDXBNJZSQVHLCKE";
        String dniUsuarioNumeros = jFDNI.getText();
        String[] partesDni = dniUsuarioNumeros.split("-");  //Rompo la cadena
        String dniNumero = partesDni[0];
        String dniLetra = partesDni[1];

        if (!dniNumero.equals("        ") || !dniLetra.equals(" ")) {

            int modulo = Integer.parseInt(dniNumero) % 23;   //Consigo el numero y hago el modulo de 23
            char letra = letrasSegunResto.charAt(modulo);

            if (dniLetra.equals(Character.toString(letra))) {
                jLabel7.setIcon(new ImageIcon(getClass().getResource("/fechainterface/correcto.png"))); // NOI18N
                jLabel7.setEnabled(true);
                jLMostrarDNICorrecto.setText("DNI Correcto");
                jLMostrarDNICorrecto.setFont(negrita);
                jLMostrarDNICorrecto.setForeground(Color.darkGray);    //Esto igual esta prohibido
                System.out.println("Dni Correcto");
                System.out.println("ok " + dniLetra + " y debiera dar " + letra);
            } else {
                jLabel7.setIcon(new ImageIcon(getClass().getResource("/fechainterface/error.png"))); // NOI18N
                jLabel7.setEnabled(true);
                jLMostrarDNICorrecto.setText("Error en DNI");
                jLMostrarDNICorrecto.setFont(negrita);
                jLMostrarDNICorrecto.setForeground(Color.red);    //Esto igual esta prohibido
                JOptionPane.showMessageDialog(null, "Dni no válido, no existe");
                System.out.println("Fecha Incorrecta");
            }
        } else {
            jLabel7.setIcon(new ImageIcon(getClass().getResource("/fechainterface/error.png"))); // NOI18N
            jLabel7.setEnabled(true);
            jLMostrarDNICorrecto.setText("Error en DNI, faltan caracteres");
            jLMostrarDNICorrecto.setFont(negrita);
            jLMostrarDNICorrecto.setForeground(Color.red);    //Esto igual esta prohibido
            JOptionPane.showMessageDialog(null, "Dni no válido ");
            System.out.println("Fecha Incorrecta");
        }
    }//GEN-LAST:event_jBComprobarDNIActionPerformed

    private void jFDNIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFDNIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFDNIActionPerformed

    private void jBComprobarCodigoPostalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBComprobarCodigoPostalActionPerformed
        String[] nombreProvincia = {"Alava", "Albacete", "Alicante", "Almería", "Ávila", "Badajoz", "Baleares", "Barcelona", "Burgos", "Cáceres",
            "Cádiz", "Castellón", "Ciudad Real", "Córdoba", "La Coruña", "Cuenca", "Gerona", "Granada", "Guadalajara",
            "Guipúzcoa", "Huelva", "Huesca", "Jaén", "León", "Lérida", "Logroño", "Lugo", "Madrid", "Málaga", "Murcia", "Navarra",
            "Orense", "Astturias(Oviedo)", "Palencia", "Las Palmas", "Pontevedra", "Salamanca", "S.C Tenerife", "Cantabria(Santander)", "Segovia", "Sevilla", "Soria", "Tarragona",
            "Teruel", "Toledo", "Valencia", "Valladolid", "Vizcaya", "Zamora", "Zaragoza", "Ceuta", "Melilla"};

        String[] numeroProvincias = {"01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "12", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34",
            "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52"};

        String[] minimoCodigo = {"01000", "02000", "03000", "04000", "05000", "06000", "07000", "08000", "09000", "10000", "11000", "12000", "13000", "14000", "15000", "16000", "17000", "18000", "19000", "20000", "21000", "22000", "23000", "24000", "25000", "26000", "27000", "28000", "29000", "30000", "31000", "32000", "33000", "34000", "35000", "36000", "37000", "38000", "39000", "40000", "41000", "42000", "43000", "44000", "45000", "46000", "47000", "48000", "49000", "50000", "51000", "52000"};
        String[] maximoCodigo = {"01520", "02696", "03860", "04897", "05697", "06980", "07860", "08980", "09693", "10991", "11693", "12609", "13779", "14970", "15981", "16891", "17869", "18890", "19495", "20870", "21891", "22880", "23790", "24996", "25796", "26589", "27891", "28991", "29792", "30892", "31890", "32930", "33993", "34889", "35640", "36980", "37900", "38911", "39880", "40593", "41980", "42368", "43896", "44793", "45960", "46980", "47883", "48992", "49882", "50840", "51001", "52001"};

        /*Obtengo los dos primeros números de la cadena para poder trabajar*/
        String codigoPostalUsuario = jFCodigoPostal.getText();
        /*Compruebo que el contenido introducido no este vacio*/
        if (!codigoPostalUsuario.equals("     ")) {
            String codigoPostalUsuarioProvincia = codigoPostalUsuario.substring(0, 2);

            /*Convierto los datos a enteros para trabajar con ellos en el 2º if*/
            int enteroCodigoPostalUsuario = Integer.parseInt(codigoPostalUsuario);
            boolean provinciaEncontrada = false;


            /*Recorro el array numeroProvincia para comprobar si existe ese numero y cual es*/
            for (int i = 0; i < numeroProvincias.length; i++) {
                if (codigoPostalUsuarioProvincia.equals(numeroProvincias[i])) {
                    provinciaEncontrada = true;
                    /*Compruebo que el numero pasado esta entre el minimo y el máximo*/
                    int enteroMinimoCodigoTemporal = Integer.parseInt(minimoCodigo[i]);
                    int enteroMaximoCodigoTemporal = Integer.parseInt(maximoCodigo[i]);
                    System.out.println(enteroMinimoCodigoTemporal + " >= " + enteroCodigoPostalUsuario + " && "
                            + enteroMaximoCodigoTemporal + " >= " + enteroCodigoPostalUsuario);

                    if (enteroMinimoCodigoTemporal <= enteroCodigoPostalUsuario && enteroMaximoCodigoTemporal >= enteroCodigoPostalUsuario) {
                        jLMostrarProvincia.setText("Provincia: " + nombreProvincia[i]);
                        jLMostrarProvincia.setFont(negrita);
                        jLMostrarProvincia.setForeground(Color.darkGray);    //Esto igual esta prohibido

                        jLabel13.setIcon(new ImageIcon(getClass().getResource("/fechainterface/correcto.png")));
                        jLabel13.setEnabled(true);
                        System.out.println("codigo correcto");

                    } else {
                        jLMostrarProvincia.setText(" Error en C.P");
                        jLMostrarProvincia.setForeground(Color.red);    //Esto igual esta prohibido
                        jLMostrarProvincia.setFont(negrita);
                        jLabel13.setIcon(new ImageIcon(getClass().getResource("/fechainterface/error.png")));
                        jLabel13.setEnabled(true);
                        System.out.println("codigo no correcto");
                        System.out.println("Provincia No existe");
                    }
                }
            }
        } else {

            /*Sino encuentra provincia en el for, es que no existe el indice de provincia*/
            //if (!provinciaEncontrada) {
            jLMostrarProvincia.setText("Provincia no encontrada");
            jLMostrarProvincia.setForeground(Color.red);    //Esto igual esta prohibido
            jLMostrarProvincia.setFont(negrita);
            jLabel13.setIcon(new ImageIcon(getClass().getResource("/fechainterface/error.png")));
            jLabel13.setEnabled(true);
            System.out.println("codigo no correcto");
            System.out.println("Provincia No existe");
        }
    }//GEN-LAST:event_jBComprobarCodigoPostalActionPerformed

    private void jBComprobarAnnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBComprobarAnnosActionPerformed

        String textoMostrar = "Formato no válido " + jFFechaAnos.getText();
        boolean fechaNacimientoCorrecta = false;

        /*Recogo los datos que ha pasado el usuario*/
        String fechaPasada = jFFechaAnos.getText();
        String[] partesFecha = fechaPasada.split("/");  //Rompo la cadena
        String diaString = partesFecha[0];
        String mesString = partesFecha[1];
        String annoString = partesFecha[2];


        /*Compruebo que los datos no esten vacios*/
        if (!diaString.equals("  ") || !mesString.equals("  ") || !annoString.equals("    ")) {

            /*Los paso a enteros*/
            int dia = Integer.parseInt(diaString);
            int mes = Integer.parseInt(mesString);
            int anno = Integer.parseInt(annoString);

            /*Descubrimos que dia es hoy*/
            Date fecha = new Date();
            SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
            String hoy = formato.format(fecha);

            /*Compruebo la fecha de hoy*/
            String[] fechaHoy = hoy.split("/");
            String diaHoyString = fechaHoy[0];
            String mesHoyString = fechaHoy[1];
            String annoHoyString = fechaHoy[2];

            /*Los paso a int*/
            int diaHoy = Integer.parseInt(diaHoyString);
            int mesHoy = Integer.parseInt(mesHoyString);
            int annoHoy = Integer.parseInt(annoHoyString);

            int annoMenor = 1900;
            int annoMaximo = annoHoy;

            //Compruebo si el dia es correcto
            for (int i = 0; i < numeroMes.length; i++) {    //Recorro como máximo 12 veces
                /*Compruebo que el año introducido este en los valores correctos*/
                if (anno >= annoMenor && anno <= annoMaximo) {
                    /*no entramos hasta que el mes introducido este entre 01 al 12, sino sale*/
                    if (mes == numeroMes[i]) {
                        /*Compruebo que el dia que han pasado este entre el dia máximo que le pertenece de ese mes y como minimo mayor a 01*/
                        if (diasMes[i] >= dia && dia > 0) {
                            /*Si el año y el mes es el mismo que la fecha actual y el dia pasado mayor que la fecha actual, intentan meter una fecha futura, algo que no puede ser*/
                            if (anno == annoHoy && mes == mesHoy && dia > diaHoy) { //
                                fechaNacimientoCorrecta = true; //Si ha llegado aquí la fecha no es correcta, pero es la que ha puesto el usuario
                                jLabel15.setIcon(new ImageIcon(getClass().getResource("/fechainterface/error.png")));
                                jLabel15.setEnabled(true);
                                jLMostrarEdad.setText("Aun no ha nacido!!");
                                jLMostrarEdad.setFont(negrita);
                                jLMostrarEdad.setForeground(Color.red);    //Esto igual esta prohibido
                                JOptionPane.showMessageDialog(null, "No puedo saber tu edad, no has nacido");
                            } else {
                                fechaNacimientoCorrecta = true; //Si ha llegado aquí la fecha es correcta!
                                /*Calculo los años, luego los meses y en funcion de lo entregado los dias*/
                                int anosCalculados = annoHoy - anno;    // Esto siempre va a ser positivo
                                int mesCumpe = mesHoy - mes;            // Esto puede ser negativo
                                int diaCumple = 0;
                                if (mesCumpe < 0) { //si el mes calculado es negativo resto un año
                                    anosCalculados = anosCalculados - 1;   
                                } else if (mesCumpe == 0) {
                                    diaCumple = diaHoy - dia;
                                    if (diaCumple > 0) {
                                        //anosCalculados = anosCalculados - 1;
                                    }
                                }
                                jLabel15.setIcon(new ImageIcon(getClass().getResource("/fechainterface/correcto.png"))); // NOI18N
                                jLabel15.setEnabled(true);
                                jLMostrarEdad.setText("Tienes " + anosCalculados + " anño/s" );
                                jLMostrarEdad.setFont(negrita);
                                jLMostrarEdad.setForeground(Color.darkGray);    //Esto igual esta prohibido

                            }
                        } else {
                            //Antes de decir que la fecha no es correcta, hay que comprobar bisiestos
                            if (numeroMes[1] == mes) {
                                //SI ((año divisible por 4) Y ((año no divisible por 100) O (año divisible por 400))) ENTONC
                                if ((anno % 4 == 0) && (anno % 100 != 0) && (dia == 29)) {
                                    fechaNacimientoCorrecta = true; //Si ha llegado aquí la fecha es correcta   
                                    /*Calculo los años, luego los meses y en funcion de lo entregado los dias*/
                                    int anosCalculados = annoHoy - anno;
                                    int mesCumpe = mesHoy - mes;
                                    if (mesCumpe < 0) {
                                        anosCalculados = anosCalculados - 1;
                                    } else if (mesCumpe == 0) {
                                        int diaCumple = diaHoy - dia;
                                        if (diaCumple > 0) {
                                            anosCalculados = anosCalculados - 1;
                                        }
                                    }
                                    jLabel15.setIcon(new ImageIcon(getClass().getResource("/fechainterface/correcto.png"))); // NOI18N
                                    jLabel15.setEnabled(true);
                                    jLMostrarEdad.setText("Tienes " + anosCalculados + " anños");
                                    jLMostrarEdad.setFont(negrita);
                                    jLMostrarEdad.setForeground(Color.darkGray);    //Esto igual esta prohibido
                                }

                            }
                        }
                    }
                }
            }
        }

        if (!fechaNacimientoCorrecta) {
            jLabel15.setIcon(new ImageIcon(getClass().getResource("/fechainterface/error.png"))); // NOI18N
            jLabel15.setEnabled(true);
            jLMostrarEdad.setText("Error en fecha");
            jLMostrarEdad.setFont(negrita);
            jLMostrarEdad.setForeground(Color.red);    //Esto igual esta prohibido
            JOptionPane.showMessageDialog(null, "Algo falla, parece que " + jFFechaAnos.getText() + " no es una fecha correcta");
            System.out.println("Fecha Incorrecta");
        }
    }//GEN-LAST:event_jBComprobarAnnosActionPerformed

    static String ponCerosIzquierda(String str, int longitud) {
        String ceros = "";
        if (str.length() < longitud) {
            for (int i = 0; i < (longitud - str.length()); i++) {
                ceros = ceros + '0';
            }
            str = ceros + str;
        }

        return str;
    }

    static String damePesoIBAN(char letra) {
        String peso = "";
        letra = Character.toUpperCase(letra);
        switch (letra) {
            case 'A':
                peso = "10";
                break;
            case 'B':
                peso = "11";
                break;
            case 'C':
                peso = "12";
                break;
            case 'D':
                peso = "13";
                break;
            case 'E':
                peso = "14";
                break;
            case 'F':
                peso = "15";
                break;
            case 'G':
                peso = "16";
                break;
            case 'H':
                peso = "17";
                break;
            case 'I':
                peso = "18";
                break;
            case 'J':
                peso = "19";
                break;
            case 'K':
                peso = "20";
                break;
            case 'L':
                peso = "21";
                break;
            case 'M':
                peso = "22";
                break;
            case 'N':
                peso = "23";
                break;
            case 'O':
                peso = "24";
                break;
            case 'P':
                peso = "25";
                break;
            case 'Q':
                peso = "26";
                break;
            case 'R':
                peso = "27";
                break;
            case 'S':
                peso = "28";
                break;
            case 'T':
                peso = "29";
                break;
            case 'U':
                peso = "30";
                break;
            case 'V':
                peso = "31";
                break;
            case 'W':
                peso = "32";
                break;
            case 'X':
                peso = "33";
                break;
            case 'Y':
                peso = "34";
                break;
            case 'Z':
                peso = "35";
                break;
        }
        return peso;
    }

    private void jBComprobarIBANActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBComprobarIBANActionPerformed
        String IBANUsuario = jFIBAN.getText();

        if (!IBANUsuario.equals("                             ")) {

            String[] partesIban = IBANUsuario.split(" ");  //Rompo la cadena
            String IbanNacionalidad = partesIban[0];
            String IbanDigitoControl = partesIban[1];
            String IbanEntidad = partesIban[2];
            String IbanOficina = partesIban[3];
            String IbanDC = partesIban[4];
            String IbanNumeroCuenta = partesIban[5];

            String numeroIBANReal = IbanEntidad + IbanOficina + IbanDC + IbanNumeroCuenta
                    + damePesoIBAN(IbanNacionalidad.charAt(0)) + damePesoIBAN(IbanNacionalidad.charAt(1)) + "00";

            /*Calculo el modulo de 97 y al resultado le resto 98*/
            BigInteger numeroCuenta = new BigInteger(numeroIBANReal);
            BigInteger noventaysiete = new BigInteger("97");
            numeroCuenta = numeroCuenta.mod(noventaysiete);
            int digitoControlTeorico = numeroCuenta.intValue();
            digitoControlTeorico = 98 - digitoControlTeorico;
            String digitoControlString = ponCerosIzquierda(Integer.toString(digitoControlTeorico), 2);
            System.out.println(ponCerosIzquierda(Integer.toString(digitoControlTeorico), 2));

            if (digitoControlString.equals(IbanDigitoControl)) {

                jLMostrarIBAN.setText("IBAN CORRECTO");
                jLMostrarIBAN.setFont(negrita);
                jLMostrarIBAN.setForeground(Color.darkGray);    //Esto igual esta prohibido
                jLabel11.setIcon(new ImageIcon(getClass().getResource("/fechainterface/correcto.png")));
                jLabel11.setEnabled(true);

            } else {
                jLMostrarIBAN.setText(" Error, digito esperado " + digitoControlTeorico);
                jLMostrarIBAN.setForeground(Color.red);    //Esto igual esta prohibido
                jLMostrarIBAN.setFont(negrita);
                jLabel11.setIcon(new ImageIcon(getClass().getResource("/fechainterface/error.png")));
                jLabel11.setEnabled(true);

            }
        } else {
            jLMostrarIBAN.setText("Error en IBAN, faltan caracteres");
            jLMostrarIBAN.setForeground(Color.red);    //Esto igual esta prohibido
            jLMostrarIBAN.setFont(negrita);
            jLabel11.setIcon(new ImageIcon(getClass().getResource("/fechainterface/error.png")));
            jLabel11.setEnabled(true);
        }

    }//GEN-LAST:event_jBComprobarIBANActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Comprobaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Comprobaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Comprobaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Comprobaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Comprobaciones().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBComprobarAnnos;
    private javax.swing.JButton jBComprobarCodigoPostal;
    private javax.swing.JButton jBComprobarDNI;
    private javax.swing.JButton jBComprobarFecha;
    private javax.swing.JButton jBComprobarIBAN;
    private javax.swing.JPanel jDNI;
    private javax.swing.JPanel jDNI1;
    private javax.swing.JFormattedTextField jFCodigoPostal;
    private javax.swing.JFormattedTextField jFDNI;
    private javax.swing.JFormattedTextField jFFecha;
    private javax.swing.JFormattedTextField jFFechaAnos;
    private javax.swing.JFormattedTextField jFIBAN;
    private javax.swing.JLabel jLMostrarDNICorrecto;
    private javax.swing.JLabel jLMostrarDNICorrecto1;
    private javax.swing.JLabel jLMostrarEdad;
    private javax.swing.JLabel jLMostrarFechaCorrecta;
    private javax.swing.JLabel jLMostrarIBAN;
    private javax.swing.JLabel jLMostrarProvincia;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    // End of variables declaration//GEN-END:variables
}
